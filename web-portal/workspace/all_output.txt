Core classes, functions, and methods:

Frontend (React):
1. App.tsx - Main entry point for the React application
2. LandingPage.tsx - Landing page component
3. SignUpPage.tsx - Sign up page component
4. LoginPage.tsx - Login page component
5. ProfilePage.tsx - Profile page component
6. MembersLandingPage.tsx - Members only landing page component
7. PrivateRoute.tsx - Higher-order component for private routes
8. AuthService.ts - Service for handling authentication and user data

Backend (Node.js):
1. server.js - Main entry point for the Node.js server
2. userController.js - Controller for handling user-related CRUD operations
3. userRoutes.js - Routes for user-related API endpoints
4. userModel.js - User model for the PostgreSQL database
5. database.js - Database configuration and connection

Now, let's create the content of each file:

Frontend:

```App.tsx
import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import LandingPage from './components/LandingPage';
import SignUpPage from './components/SignUpPage';
import LoginPage from './components/LoginPage';
import ProfilePage from './components/ProfilePage';
import MembersLandingPage from './components/MembersLandingPage';
import PrivateRoute from './components/PrivateRoute';

function App() {
  return (
    <Router>
      <Switch>
        <Route exact path="/" component={LandingPage} />
        <Route path="/signup" component={SignUpPage} />
        <Route path="/login" component={LoginPage} />
        <PrivateRoute path="/profile" component={ProfilePage} />
        <PrivateRoute path="/members" component={MembersLandingPage} />
      </Switch>
    </Router>
  );
}

export default App;
```

```LandingPage.tsx
import React from 'react';

const LandingPage: React.FC = () => {
  return (
    <div>
      <h1>Welcome to the Landing Page</h1>
    </div>
  );
};

export default LandingPage;
```

```SignUpPage.tsx
import React, { useState } from 'react';
import AuthService from '../services/AuthService';

const SignUpPage: React.FC = () => {
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [email, setEmail] = useState('');
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const response = await AuthService.signUp({ firstName, lastName, email, username, password });
    if (response.success) {
      // Redirect to login page
    } else {
      // Show error message
    }
  };

  return (
    <div>
      <h1>Sign Up</h1>
      <form onSubmit={handleSubmit}>
        <input type="text" placeholder="First Name" value={firstName} onChange={(e) => setFirstName(e.target.value)} />
        <input type="text" placeholder="Last Name" value={lastName} onChange={(e) => setLastName(e.target.value)} />
        <input type="email" placeholder="Email" value={email} onChange={(e) => setEmail(e.target.value)} />
        <input type="text" placeholder="Username" value={username} onChange={(e) => setUsername(e.target.value)} />
        <input type="password" placeholder="Password" value={password} onChange={(e) => setPassword(e.target.value)} />
        <button type="submit">Sign Up</button>
      </form>
    </div>
  );
};

export default SignUpPage;
```

```LoginPage.tsx
import React, { useState } from 'react';
import AuthService from '../services/AuthService';

const LoginPage: React.FC = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const response = await AuthService.login({ username, password });
    if (response.success) {
      // Redirect to members landing page
    } else {
      // Show error message
    }
  };

  return (
    <div>
      <h1>Login</h1>
      <form onSubmit={handleSubmit}>
        <input type="text" placeholder="Username" value={username} onChange={(e) => setUsername(e.target.value)} />
        <input type="password" placeholder="Password" value={password} onChange={(e) => setPassword(e.target.value)} />
        <button type="submit">Login</button>
      </form>
    </div>
  );
};

export default LoginPage;
```

```ProfilePage.tsx
import React, { useState, useEffect } from 'react';
import AuthService from '../services/AuthService';

const ProfilePage: React.FC = () => {
  const [user, setUser] = useState(null);

  useEffect(() => {
    const fetchUser = async () => {
      const response = await AuthService.getUser();
      if (response.success) {
        setUser(response.user);
      } else {
        // Show error message
      }
    };

    fetchUser();
  }, []);

  return (
    <div>
      <h1>Profile Page</h1>
      {user && (
        <div>
          <p>First Name: {user.firstName}</p>
          <p>Last Name: {user.lastName}</p>
          <p>Email: {user.email}</p>
          <p>Username: {user.username}</p>
        </div>
      )}
    </div>
  );
};

export default ProfilePage;
```

```MembersLandingPage.tsx
import React, { useState, useEffect } from 'react';
import AuthService from '../services/AuthService';

const MembersLandingPage: React.FC = () => {
  const [user, setUser] = useState(null);

  useEffect(() => {
    const fetchUser = async () => {
      const response = await AuthService.getUser();
      if (response.success) {
        setUser(response.user);
      } else {
        // Show error message
      }
    };

    fetchUser();
  }, []);

  return (
    <div>
      <h1>Hello, {user ? user.firstName : 'User'}</h1>
    </div>
  );
};

export default MembersLandingPage;
```

```PrivateRoute.tsx
import React from 'react';
import { Route, Redirect, RouteProps } from 'react-router-dom';
import AuthService from '../services/AuthService';

interface PrivateRouteProps extends RouteProps {
  component: React.ComponentType<any>;
}

const PrivateRoute: React.FC<PrivateRouteProps> = ({ component: Component, ...rest }) => {
  return (
    <Route
      {...rest}
      render={(props) => (AuthService.isAuthenticated() ? <Component {...props} /> : <Redirect to="/login" />)}
    />
  );
};

export default PrivateRoute;
```

```AuthService.ts
class AuthService {
  static signUp(userData: any) {
    // Call backend API to create a new user
  }

  static login(credentials: any) {
    // Call backend API to authenticate the user
  }

  static getUser() {
    // Call backend API to get the user data
  }

  static isAuthenticated() {
    // Check if the user is authenticated
  }
}

export default AuthService;
```

Backend:

```server.js
const express = require('express');
const userRoutes = require('./routes/userRoutes');
const database = require('./config/database');

const app = express();
const PORT = process.env.PORT || 3001;

app.use(express.json());
app.use('/api/users', userRoutes);

database.connect();

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
```

```userController.js
const UserModel = require('../models/userModel');

exports.createUser = async (req, res) => {
  try {
    const newUser = await UserModel.create(req.body);
    res.status(201).json({ success: true, data: newUser });
  } catch (error) {
    res.status(400).json({ success: false, message: error.message });
  }
};

exports.getUser = async (req, res) => {
  try {
    const user = await UserModel.findById(req.params.id);
    res.status(200).json({ success: true, data: user });
  } catch (error) {
    res.status(404).json({ success: false, message: error.message });
  }
};

exports.updateUser = async (req, res) => {
  try {
    const updatedUser = await UserModel.findByIdAndUpdate(req.params.id, req.body, { new: true });
    res.status(200).json({ success: true, data: updatedUser });
  } catch (error) {
    res.status(400).json({ success: false, message: error.message });
  }
};

exports.deleteUser = async (req, res) => {
  try {
    await UserModel.findByIdAndDelete(req.params.id);
    res.status(204).json({ success: true, data: null });
  } catch (error) {
    res.status(404).json({ success: false, message: error.message });
  }
};
```

```userRoutes.js
const express = require('express');
const userController = require('../controllers/userController');

const router = express.Router();

router.post('/', userController.createUser);
router.get('/:id', userController.getUser);
router.put('/:id', userController.updateUser);
router.delete('/:id', userController.deleteUser);

module.exports = router;
```

```userModel.js
const { Pool } = require('pg');
const database = require('../config/database');

const pool = new Pool(database);

const createUser = async (userData) => {
  // Insert user data into the database
};

const findById = async (id) => {
  // Find user by id in the database
};

const findByIdAndUpdate = async (id, userData) => {
  // Update user data in the database
};

const findByIdAndDelete = async (id) => {
  // Delete user from the database
};

module.exports = {
  createUser,
  findById,
  findByIdAndUpdate,
  findByIdAndDelete,
};
```

```database.js
const { Pool } = require('pg');

const pool = new Pool({
  user: 'your_user',
  host: 'your_host',
  database: 'your_database',
  password: 'your_password',
  port: 'your_port',
});

const connect = async () => {
  try {
    await pool.connect();
    console.log('Connected to the database');
  } catch (error) {
    console.error('Error connecting to the database:', error);
  }
};

module.exports = {
  pool,
  connect,
};
```